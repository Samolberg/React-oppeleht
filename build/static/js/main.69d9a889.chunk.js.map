{"version":3,"sources":["Components/navbar.js","Components/Home.js","Components/Todo.js","Components/Examples.js","Components/Resources.js","Components/Game.js","Components/Feedback.js","App.js","serviceWorker.js","index.js"],"names":["Navvbar","Navbar","bg","variant","Brand","href","Nav","className","Link","Component","Home","Todo","Examples","Resources","Game","Feedback","App","navbar","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTA0BeA,E,iLAhBP,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,cACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,SAAf,QACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,SAAf,SACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,aAAf,YACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,cAAf,aACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,SAAf,QACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,aAAf,kB,GAXEI,aCQPC,G,uLAVP,OACI,yBAAKH,UAAU,2DACX,yBAAKA,UAAU,kBAAf,SACA,yBAAKA,UAAU,aAAf,cACA,yBAAKA,UAAU,iBAAf,4E,GANGE,cCOJE,E,iLANP,OACI,wC,GAHOF,aCQJG,E,iLANP,OACI,4C,GAHWH,aCQRI,E,iLANP,OACI,6C,GAHYJ,aCQTK,E,iLANP,OACI,wC,GAHOL,aCQJM,E,iLANP,OACI,4C,GAHWN,aC0BRO,MAhBf,WACI,OACI,kBAAC,IAAD,KACI,yBAAKT,UAAU,aACX,kBAAC,EAAD,CAASU,OAAQjB,IACjB,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,QAAQC,UAAWV,IACrC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,QAAQC,UAAWT,IACrC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,YAAYC,UAAWR,IACzC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,aAAaC,UAAWP,IAC1C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,QAAQC,UAAWN,IACrC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,YAAYC,UAAWL,OCXrCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.69d9a889.chunk.js","sourcesContent":["import Navbar from \"react-bootstrap/Navbar\";\r\nimport React, { Component } from 'react';\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\n\r\n\r\n\r\n\r\nclass Navvbar extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"/Home\">Study Page</Navbar.Brand>\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/Home\">Home</Nav.Link>\r\n                    <Nav.Link href=\"/Todo\">To Do</Nav.Link>\r\n                    <Nav.Link href=\"/Examples\">Examples</Nav.Link>\r\n                    <Nav.Link href=\"/Resources\">Resources</Nav.Link>\r\n                    <Nav.Link href=\"/Game\">Game</Nav.Link>\r\n                    <Nav.Link href=\"/Feedback\">Feedback</Nav.Link>\r\n                </Nav>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navvbar;\r\n\r\n","import React, {Component} from 'react';\r\n\r\n\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"p-4 m-4 text-center text-white main-body bg-dark shadow\">\r\n                <div className=\"display-1 mt-3\">React</div>\r\n                <div className=\"display-4\">Study Page</div>\r\n                <div className=\"p-3 lead mt-3\">Here you can find examples of react snippets and learning resources</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\n\r\nclass Todo extends Component {\r\n    render() {\r\n        return (\r\n            <h1>Todo</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\n\r\n\r\nclass Examples extends Component {\r\n    render() {\r\n        return (\r\n            <h1>Examples</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Examples;","import React, { Component } from 'react';\r\n\r\n\r\nclass Resources extends Component {\r\n    render() {\r\n        return (\r\n            <h1>Resources</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Resources;","import React, { Component } from 'react';\r\n\r\n\r\nclass Game extends Component {\r\n    render() {\r\n        return (\r\n            <h1>Game</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\r\n\r\n\r\nclass Feedback extends Component {\r\n    render() {\r\n        return (\r\n            <h1>Feedback</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Feedback;","import React from 'react';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navvbar from './Components/navbar.js';\nimport './style.css';\nimport Home from './Components/Home';\nimport Todo from './Components/Todo';\nimport Examples from './Components/Examples';\nimport Resources from './Components/Resources';\nimport Game from './Components/Game';\nimport Feedback from './Components/Feedback';\n\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"container\">\n                <Navvbar navbar={Navvbar}/>\n                <Route exact path=\"/Home\" component={Home}/>\n                <Route exact path=\"/Todo\" component={Todo}/>\n                <Route exact path=\"/Examples\" component={Examples}/>\n                <Route exact path=\"/Resources\" component={Resources}/>\n                <Route exact path=\"/Game\" component={Game}/>\n                <Route exact path=\"/Feedback\" component={Feedback}/>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}